// class Solution {
//     public int maxProduct(int[] nums) {
//         int pre =1,suf =1;
//         int ans = Integer.MIN_VALUE;

//         int n=nums.length;
//         for(int i=0; i<n; i++){
//             if(pre==0) pre=1;
//             if(suf==0) suf=1;

//             pre= pre*nums[i];
//             suf=suf*nums[n-i-1];

//             ans = Math.max(ans , Math.max(pre,suf));
//         }
//         return ans;
//     }
// }
// normal

//kadane Algorithm
public class MaximumProductSubarray {
    public static int maxProduct(int[] nums) {
        if (nums == null || nums.length == 0) {
            return 0;
        }

        int maxProduct = nums[0];
        int minProduct = nums[0];
        int globalMax = nums[0];

        for (int i = 1; i < nums.length; i++) {
            if (nums[i] < 0) {
                // Swap max and min because multiplying by a negative reverses roles
                int temp = maxProduct;
                maxProduct = minProduct;
                minProduct = temp;
            }

            maxProduct = Math.max(nums[i], maxProduct * nums[i]);
            minProduct = Math.min(nums[i], minProduct * nums[i]);

            globalMax = Math.max(globalMax, maxProduct);
        }

        return globalMax;
    }

    public static void main(String[] args) {
        int[] nums = {2, 3, -2, 4};
        System.out.println("Maximum Product Subarray: " + maxProduct(nums)); // Output: 6
    }
}
